<style>
    /* Grid Layout */
    .postcard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }

    /* Postcard Styles */
    .postcard {
        border: 2px solid #ccc;
        background: white;
        padding: 8px;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .postcard:hover {
        transform: scale(1.03);
    }

    .postcard.pending,
    .postcard.error {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100px;
        font-size: 14px;
        color: #666;
    }

    .postcard.error {
        background-color: #ffe6e6;
        color: red;
    }
</style>

<div id="postcards-list">

    <div id="postcards-grid" hx-get="/trips/<%=currentOrUpcomingTrip.slug%>/postcards-grid" hx-trigger="load"
        hx-swap="innerHTML"></div>

    <%- include('../../partials/lightbox-standalone') %>

</div>

<script>

    function postToFeedHandler() {
        const currentItem = lightboxItems[currentIndex]
    }

    async function deletePostcardHandler() {
        const currentItem = lightboxItems[currentIndex]
        const confirmed = confirm("Delete this postcard?");
        if (!confirmed) return false;
        try {
            let options = { target: `#postcards-grid`, swap: 'outerHTML' };
            let url = `/trips/<%-currentOrUpcomingTrip.slug%>/postcards/${currentItem.id}`;
            await window.htmxAjaxPromise('DELETE', url, options);
            closeLightbox()
            return true;
        }
        catch (error) {
            showToast(error, "error");
            return false;
        }
    }

    function setupPostcardLightbox() {

        const postcardElements = Array.from(document.querySelectorAll('.postcard-thumb'));
        if (postcardElements.length === 0) return;

        const postToFeedButtonItem = {
            buttonId: 'lightbox-posttofeed',
            eventType: 'click',
            handler: postToFeedHandler,
            label: 'Post'
        }
        const deletePostcardButtonItem = {
            buttonId: 'lightbox-deletepost',
            eventType: 'click',
            handler: deletePostcardHandler,
            label: '❌'
        }

        const postToFeedButton = document.createElement('button');
        postToFeedButton.textContent = postToFeedButtonItem.label
        postToFeedButton.id = postToFeedButtonItem.buttonId;
        postToFeedButton.type = 'button';
        document.getElementById('lightbox-controls').appendChild(postToFeedButton)

        const deletePostcardButton = document.createElement('button');
        deletePostcardButton.textContent = deletePostcardButtonItem.label
        deletePostcardButton.id = deletePostcardButtonItem.buttonId
        deletePostcardButton.type = 'button';
        document.getElementById('lightbox-controls').appendChild(deletePostcardButton)

        const items = postcardElements.map(el => ({
            url: el.dataset.full,
            id: el.dataset.id
        }));

        initLightbox(items, {
            onDelete: async (item) => {
                const confirmed = confirm("Delete this postcard?");
                if (!confirmed) return false;
                await fetch(`/postcards/${item.id}/delete`, { method: 'DELETE' });
                return true;
            },
            customButtons: [postToFeedButtonItem, deletePostcardButtonItem]
        });

        postcardElements.forEach((el, i) => {
            el.addEventListener('click', () => openLightbox(i));
        });
    }

    // Run it after HTMX swaps in new content
    document.body.addEventListener('htmx:afterSwap', (e) => {
        if (e.target.id === 'postcards-grid') {
            setupPostcardLightbox();
        }
    });

</script>