<%- include('../../partials/header/current-upcoming') %>
<style>
    #avatar-head {
        width: 40px;
        height: 40px;
    }

    .gallery-container {
        max-width: 1024px;
        margin: 0 auto;
        padding: 2rem 1rem;
        /* text-align: center; */
    }

    .media-grid {
        margin-top: 1rem;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 1rem;
    }

    .media-item {
        aspect-ratio: 1 / 1;
        /* square thumbnails */
        cursor: pointer;
        position: relative;
        padding: 0;
        overflow: hidden;
        border-radius: 6px;
    }

    .media-item-image {
        width: 100%;
        height: 100%;
        display: block;
        height: auto;
        object-fit: cover;
        aspect-ratio: 1 / 1;
        border-radius: 6px;
        transition: transform 0.2s ease;
    }

    .media-item-image:hover {
        transform: scale(1.03);
    }

    .overlay {
        position: absolute;
        inset: 0;
        background: rgba(0, 0, 0, 0.65);
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0.5rem;
        opacity: 0;
        transition: opacity 200ms ease-in-out;
        pointer-events: none;
    }

    .media-item:hover .overlay {
        opacity: 1;
        pointer-events: auto;
    }

    .overlay-top {
        display: flex;
        justify-content: flex-start;
    }

    .overlay-top .avatar {
        width: 40px;
        height: 40px;
        border: 2px solid white;
        border-radius: 50%;
    }

    .overlay-bottom {
        display: flex;
        justify-content: space-evenly;
        gap: 0.5rem;
    }

    .overlay-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        padding: 0.4rem 0.6rem;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .overlay-btn:hover {
        background: rgba(255, 255, 255, 0.4);
    }

    .lightbox-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        font-size: 2rem;
        background: rgba(255, 255, 255, 0.1);
        color: white;
        padding: 0.5rem 1rem;
        font-size: 1.25rem;
        cursor: pointer;
    }

    .lightbox-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.9);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        flex-direction: column;
    }

    .lightbox-overlay.active {
        display: flex;
    }

    .lightbox-image {
        max-width: 90vw;
        max-height: 80vh;
        object-fit: contain;
        border-radius: 4px;
        margin-bottom: 1rem;
    }

    .lightbox-controls {
        display: flex;
        gap: 1rem;
    }

    .lightbox-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        padding: 0.6rem 1rem;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .lightbox-btn:hover {
        background: rgba(255, 255, 255, 0.4);
    }

    .lightbox-tags {
        margin-top: 10px;
    }

    .lightbox-tag-editor-modal {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(30, 30, 30, 0.95);
        padding: 1rem;
        border-radius: 6px;
        box-shadow: 0 0 10px #000;
        z-index: 1000;
        width: 80%;
        max-width: 400px;
        color: white;
    }

    .lightbox-tag-editor-modal.hidden {
        display: none;
    }

    .tag-list {
        margin-top: 0.5rem;
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        justify-content: center;
    }

    .tag-pill {
        background-color: rgba(255, 255, 255, 0.5);
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 999px;
        font-size: 0.6rem;
    }

    .tag-pill.empty {
        opacity: 0.6;
    }

    a.download-link {
        display: contents;
    }

    .controls {
        display: flex;
        flex-direction: row;
        justify-content: flex-end;
        width: 100%;
        margin: 10px 0;
    }

    @media (max-width: 768px) {

        .lightbox-controls {
            gap: 0.5rem;
        }
    }
</style>

<script>
    // TODO: save this in the localStorage and not globally
    // gallery globals
    const DEFAULT_TAG_ID = -1;
    const DEFAULT_AUTHOR = -1;
    const DEFAULT_SORT_CRITERIA = -1;
    const MOST_LIKES_SORT_CRITERIA = 1;
    const CLOSED = false;

    const DEFAULT_FILTER_DIV_STATE = CLOSED;

    const galleryState = {
        selectedTagId: DEFAULT_TAG_ID,
        selectedAuthor: DEFAULT_AUTHOR,
        selectedSortCriteria: DEFAULT_SORT_CRITERIA,
        filterDivState: DEFAULT_FILTER_DIV_STATE
    };

    function htmxAjaxPromise(method, url, options = {}) {
        return new Promise((resolve, reject) => {
            const targetSelector = options.target;
            if (!targetSelector) {
                reject(new Error("htmxAjaxPromise requires a { target } option"));
                return;
            }

            try {
                const listener = (evt) => {
                    const req = evt.detail?.requestConfig;
                    if (req?.verb.toUpperCase() === method.toUpperCase() && req.path === url) {
                        document.body.removeEventListener('htmx:afterRequest', listener);
                        resolve(evt);
                    }
                };

                document.body.addEventListener('htmx:afterRequest', listener);
                htmx.ajax(method, url, options);
            } catch (err) {
                reject(err);
            }
        });
    }

    function getGalleryItems() {
        return Array.from(document.querySelectorAll('.gallery-item'));
    }

    function stringNumberToBoolean(stringNumber) {
        return Boolean(Number(stringNumber));
    }

    function stringToBoolean(string) {
        return Boolean(string);
    }
</script>

<main class="gallery-container" id="gallery-container">
    <div id="uploadModal" class="modal hidden">
        <div class="modal-content">
            <button id="closeUploadModalButton" class="modal-close">âœ–</button>
            <div style="margin-bottom: 1rem;">
                Subite unas fotis, Rey ðŸ‘‘ <span style="font-size: 0.85em;">(mÃ¡ximo 5)</span>.
            </div>

            <form action="/trips/<%-currentOrUpcomingTrip.slug%>/upload" hx-target="#media-grid" hx-swap="afterbegin"
                hx-encoding="multipart/form-data">
                <input type="file" name="media" accept="image/*" multiple onchange="toggleUploadButton(this)">
                <button type="submit" class="button" disabled id="uploadButton">SÃºbele</button>
            </form>
        </div>
    </div>

    <script>
        function toggleUploadButton(input) {
            const btn = document.getElementById('uploadButton');
            btn.disabled = input.files.length === 0;
        }
    </script>

    <% if (media.length === 0) { %>
    <p>No hay imÃ¡genes todavÃ­a. Â¡Que amargos son!</p>
    <% } %>

    <div class="controls">
        <button class="button" id="showUploadModalButton">Agregar Fotis</button>
    </div>

    <script>

        function isTheUserAnAuthor() {
            let authors = document.getElementsByClassName('author-pill');
            let userFound = false;
            for (let i = 0; i < authors.length; i++) {
                if (authors[i].textContent.toLocaleLowerCase() === '<%=currentUser.handle%>'.toLocaleLowerCase()) {
                    userFound = true;
                    break;
                }
            }
            return userFound;
        }
        function filtersAreActive() {
            const activeTag = document.querySelector('.tag-pill.active');
            const activeAuthor = document.querySelector('.author-pill.active');
            const activeSort = document.querySelector('.sort-pill.sort-order-pill.active');
            return (
                galleryState.selectedTagId !== "-1" ||
                galleryState.selectedAuthor !== "-1" ||
                galleryState.selectedSortCriteria !== "-1"
            );
        }


        const form = document.querySelector('#uploadModal form');
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'HX-Request': 'true', // Optional: for server to send X-Toast
                }
            });

            const toast = response.headers.get('X-Toast');
            if (toast) showToast(toast, 'success');

            // VOY POR AQUI
            // Unhandled edge case:
            // si el usuario borra su Ãºltimo o Ãºnico media item, su nombre deberÃ­a desaparecer
            // de los authors filter pills

            if (filtersAreActive() || !isTheUserAnAuthor()) {
                // Reset everything
                setTimeout(() => {
                    document.getElementById('loading-overlay').classList.remove('hidden');
                    window.location.href = '/trips/<%-currentOrUpcomingTrip.slug%>/gallery';
                }, 1000);

            }
            else {
                const html = await response.text();
                document.querySelector('#media-grid').insertAdjacentHTML('afterbegin', html);
            }

            form.reset();
            document.getElementById('uploadModal').classList.add('hidden');
        });


        function hideUploadForm() {
            document.getElementById('uploadModal')?.classList.add('hidden');
            document.querySelector('#uploadModal form')?.reset();
        }

        function showUploadForm() {
            document.getElementById('uploadModal')?.classList.remove('hidden');
        }
        document.getElementById('closeUploadModalButton').addEventListener('click', hideUploadForm);
        document.getElementById('showUploadModalButton').addEventListener('click', showUploadForm);
    </script>

    <%- include('filter')%>

    <div id="media-grid" class="media-grid">
        <% if (media.length > 0 ) {%>
        <% media.forEach((item, index) => { %>
        <%- include('media-item',{index, item}) %>
        <% }) %>
    </div>
    <div id="no-images-message"></div>


    <!-- Lightbox -->
    <%- include('lightbox') %>
    <!-- Lightbox -->


    <!-- This listener is for the form inside like-button-gallery.ejs -->
    <script>
        document.body.addEventListener('submit', async function (e) {
            if (!e.target.matches('.like-form')) return;
            e.preventDefault();
            const form = e.target;

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: { 'HX-Request': 'true' }
                });

                if (!response.ok) throw new Error('Failed to like');

                if (galleryState.selectedSortCriteria == MOST_LIKES_SORT_CRITERIA) {
                    // Like sorting is active â†’ reload the grid
                    const params = new URLSearchParams();
                    if (galleryState.selectedTagId && galleryState.selectedTagId !== "-1") params.append('tag', galleryState.selectedTagId);
                    if (galleryState.selectedAuthor && galleryState.selectedAuthor !== "-1") params.append('author', galleryState.selectedAuthor);
                    if (galleryState.selectedSortCriteria && galleryState.selectedSortCriteria !== "-1") params.append('sort', galleryState.selectedSortCriteria);

                    const galleryUrl = `/trips/<%= currentOrUpcomingTrip.slug %>/gallery?` + params.toString();

                    htmx.ajax('GET', galleryUrl, {
                        target: '#media-grid',
                        swap: 'innerHTML'
                    });
                } else {
                    // Like sorting NOT active â†’ only update this button
                    const html = await response.text();
                    form.outerHTML = html;
                }
            } catch (err) {
                showToast('Error al dar like', 'error');
                console.error(err);
            }
        });
    </script>

    <% } %>
</main>
<%- include('../../partials/footer') %>