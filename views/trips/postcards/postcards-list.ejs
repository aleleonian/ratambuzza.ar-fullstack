<link rel="stylesheet" href="/style/postcards.css" />

<div id="postcards-list">

    <div id="postcards-grid" hx-get="/trips/<%=currentOrUpcomingTrip.slug%>/playground/postcards-grid" hx-trigger="load"
        hx-swap="innerHTML"></div>

    <%- include('../../partials/lightbox-standalone') %>

    <div id="dummy-target" style="display:none"></div>
</div>

<script>

    async function postToFeedHandler() {
        if (confirm('Posteo esta imagen al feed?')) {
            const currentItem = lightboxItems[currentIndex];
            let options = { target: '#dummy-target', swap: 'none', values: { postcardId: currentItem.id } };
            let url = `/trips/<%-currentOrUpcomingTrip.slug%>/playground/postcards/post`;
            await window.htmxAjaxPromise('POST', url, options);
        }
    }

    async function deletePostcard(postcardId) {
        let options = { target: `#postcards-grid`, swap: 'innerHTML' };
        let url = `/trips/<%-currentOrUpcomingTrip.slug%>/playground/postcards/${postcardId}`;
        await window.htmxAjaxPromise('DELETE', url, options);
        return true;
    }

    async function deletePostcardErrorHandler(postcardId) {
        const confirmed = confirm("Borro este error?");
        if (!confirmed) return false;
        deletePostcard(postcardId);
    }
    async function deletePostcardLightboxHandler() {
        const currentItem = lightboxItems[currentIndex]
        const confirmed = confirm("Borro esta postal?");
        if (!confirmed) return false;
        try {
            deletePostcard(currentItem.id)
            closeLightbox();
            return true;
        }
        catch (error) {
            showToast(error, "error");
            return false;
        }
    }

    function setupPostcardLightbox() {
        const postcardElements = Array.from(document.querySelectorAll('.postcard-thumb'));
        if (postcardElements.length === 0) return;

        // Clear old buttons
        clearLightboxCustomButtons();

        const items = postcardElements.map(el => ({
            url: el.dataset.full,
            id: el.dataset.id
        }));

        // Replace global lightboxItems (assuming that's what your lightbox uses)
        window.lightboxItems = items;

        // Add buttons
        const postToFeedButtonItem = {
            buttonId: 'lightbox-posttofeed',
            eventType: 'click',
            handler: postToFeedHandler,
            label: 'Post'
        };
        const deletePostcardButtonItem = {
            buttonId: 'lightbox-deletepost',
            eventType: 'click',
            handler: deletePostcardLightboxHandler,
            label: '❌'
        };

        [postToFeedButtonItem, deletePostcardButtonItem].forEach(({ buttonId, label }) => {
            const btn = document.createElement('button');
            btn.textContent = label;
            btn.id = buttonId;
            btn.type = 'button';
            document.getElementById('lightbox-controls').appendChild(btn);
        });

        // Re-init lightbox with updated items + buttons
        initLightbox({
            customButtons: [postToFeedButtonItem, deletePostcardButtonItem]
        });

        // Rebind click handlers
        postcardElements.forEach((el, i) => {
            el.addEventListener('click', () => openLightbox(i, items));
        });
    }

    // Remove custom buttons before re-adding them
    function clearLightboxCustomButtons() {
        const keepIds = ['lightbox-prev', 'lightbox-next', 'lightbox-download', 'lightbox-close'];
        const controls = document.getElementById('lightbox-controls');
        Array.from(controls.children).forEach(child => {
            if (!keepIds.includes(child.id)) {
                controls.removeChild(child);
            }
        });
    }

    // Polling mechanism for postcard status updates
    let pollingInterval = null;

    function startPolling() {
        
        // Clear any existing interval
        if (pollingInterval) {
            clearInterval(pollingInterval);
        }

        console.log('Starting postcard status polling...');

        pollingInterval = setInterval(async () => {
            try {
                const response = await fetch(`/trips/<%=currentOrUpcomingTrip.slug%>/playground/postcards-status`);

                if (!response.ok) {
                    console.warn('Polling response not OK:', response.status);
                    return;
                }

                const data = await response.json();
                console.log('Polling status:', data);

                if (!data.hasPending) {
                    // No more pending postcards, refresh only pending items and stop polling
                    console.log('No pending postcards, refreshing pending items and stopping polling');
                    await refreshPendingPostcards();
                    stopPolling();
                } else {
                    // Still have pending postcards, refresh only pending items to check for completed ones
                    console.log(`Still ${data.statusCounts.pending} pending postcards, checking for updates`);
                    await refreshPendingPostcards();
                }
            } catch (error) {
                console.error('Polling error:', error);
                // Continue polling even if there's an error, but check if we should stop
                const pendingElements = document.querySelectorAll('.pending-status');
                if (pendingElements.length === 0) {
                    console.log('No pending elements found in DOM, stopping polling');
                    stopPolling();
                }
            }
        }, 10000); // Poll every 10 seconds
    }

    async function stopPolling() {
        if (pollingInterval) {
            console.log('Stopping postcard status polling');
            clearInterval(pollingInterval);
            pollingInterval = null;
            // Re-enable form
            enablePostcardForm();
        }
    }

    function enablePostcardForm() {
        const fieldset = document.querySelector('#postcards-form fieldset');
        if (fieldset) {
            fieldset.removeAttribute('disabled');
            fieldset.style.pointerEvents = '';
            fieldset.style.opacity = '';
            console.log('Form re-enabled');
        }

        // Blur TomSelect to close any open dropdowns
        const tomSelectInstances = window.tomSelectInstances || {};
        for (const key in tomSelectInstances) {
            const instance = tomSelectInstances[key];
            if (instance) {
                instance.blur();
            }
        }
    }

    async function refreshPendingPostcards() {
        // Find all pending postcard elements
        const pendingElements = document.querySelectorAll('[data-postcard-status="pending"]');

        if (pendingElements.length === 0) {
            console.log('No pending postcards to refresh');
            return;
        }

        console.log(`Refreshing ${pendingElements.length} pending postcards`);

        // Refresh each pending postcard individually
        for (const element of pendingElements) {
            const postcardId = element.dataset.postcardId;
            if (postcardId) {
                const url = `/trips/<%=currentOrUpcomingTrip.slug%>/playground/postcards/${postcardId}/item`;
                const options = { target: `[data-postcard-id="${postcardId}"]`, swap: 'outerHTML' };
                await window.htmxAjaxPromise('GET', url, options);
            }
        }

        // Re-setup lightbox after updating postcards
        setupPostcardLightbox();
    }

    function checkAndStartPolling() {
        
        // Check if there are any pending postcards in the current grid
        const pendingElements = document.querySelectorAll('.pending-status');
        console.log(`Found ${pendingElements.length} pending postcards in DOM`);
        
        if (pendingElements.length > 0) {
            console.log('Starting polling for pending postcards');
            startPolling();
        } else {
            console.log('No pending postcards found, stopping polling');
            stopPolling();
        }
    }

    // Run it after HTMX swaps in new content
    document.body.addEventListener('htmx:afterSwap', (e) => {
        if (e.target.id === 'postcards-grid') {
            
            setupPostcardLightbox();
            checkAndStartPolling();
        }
        if (e.target.id === 'new-postcard-form-container') {
            
            // After submitting a new postcard, start polling
            setTimeout(checkAndStartPolling, 1000); // Small delay to ensure grid is refreshed
        }
    });

    // Initial check when page loads
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(checkAndStartPolling, 2000); // Wait for initial grid load
    });

    // Stop polling when page is about to unload
    window.addEventListener('beforeunload', stopPolling);

</script>