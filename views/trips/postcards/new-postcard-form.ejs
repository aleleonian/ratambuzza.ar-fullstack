<style>
    .disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
    }

    form label {
        display: block;
        margin-bottom: 4px;
        font-weight: bold;
    }

    .multi-avatar-picker {
        margin-bottom: 1rem;
    }

    .avatar-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .avatar-option {
        display: flex;
        flex-direction: column;
        align-items: center;
        border: 2px solid transparent;
        padding: 0.25rem;
        border-radius: 6px;
        cursor: pointer;
        transition: border 0.2s ease;
    }

    .avatar-option img {
        width: 24;
        height: 24px;
        border-radius: 50%;
    }

    .avatar-option.selected {
        border-color: #2196f3;
        background-color: #e3f2fd;
    }

    .avatar-option span {
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    .form-row {
        display: flex;
        justify-content: space-between;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .form-row>div {
        flex: 1;
    }

    @media (max-width: 768px) {
        .form-row {
            flex-direction: column;
        }

        .avatar-grid {
            justify-content: space-evenly;
        }
    }
</style>


<div id="form-container">
    <%- include('actual-postcard-form')%>
</div>

<script>
    function initTomSelect() {
        const options = [...document.querySelectorAll('#avatar-select option')].map(opt => ({
            value: opt.value,
            text: opt.textContent,
            customProperties: JSON.parse(opt.dataset.customProperties || '{}')
        }));

        if (TomSelect.instances && TomSelect.instances['avatar-select']) {
            TomSelect.instances['avatar-select'].destroy();
        }

        new TomSelect("#avatar-select", {
            maxItems: 3,
            options: options,
            valueField: "value",
            labelField: "text",
            searchField: "text",
            plugins: ['remove_button'],
            render: {
                option: function (data, escape) {
                    const imgUrl = data.customProperties?.img || '';
                    return `<div>
            <img src="${imgUrl}" style="width:20px;height:20px;border-radius:50%;margin-right:8px;">
            ${escape(data.text)}
          </div>`;
                },
                item: function (data, escape) {
                    const imgUrl = data.customProperties?.img || '';
                    return `<div>
            <img src="${imgUrl}" style="width:16px;height:16px;border-radius:50%;margin-right:6px;">
            ${escape(data.text)}
          </div>`;
                }
            }
        });
    }

    // Register listener only once
    document.addEventListener('DOMContentLoaded', () => {
        initTomSelect(); // Initial render
        document.body.addEventListener('htmx:afterSettle', function () {
            initTomSelect();
        });
    });
</script>