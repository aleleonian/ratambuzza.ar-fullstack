<%- include('../../partials/header/current-upcoming') %>
<style>
    #avatar-head {
        width: 40px;
        height: 40px;
    }

    .gallery-container {
        max-width: 1024px;
        margin: 0 auto;
        padding: 2rem 1rem;
        /* text-align: center; */
    }

    .media-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 1rem;
    }

    .media-item {
        aspect-ratio: 1 / 1;
        /* square thumbnails */
        cursor: pointer;
        position: relative;
        padding: 0;
        overflow: hidden;
        border-radius: 6px;
    }

    .media-item-image {
        width: 100%;
        height: 100%;
        display: block;
        height: auto;
        object-fit: cover;
        aspect-ratio: 1 / 1;
        border-radius: 6px;
        transition: transform 0.2s ease;
    }

    .media-item-image:hover {
        transform: scale(1.03);
    }

    .overlay {
        position: absolute;
        inset: 0;
        background: rgba(0, 0, 0, 0.65);
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0.5rem;
        opacity: 0;
        transition: opacity 200ms ease-in-out;
        pointer-events: none;
    }

    .media-item:hover .overlay {
        opacity: 1;
        pointer-events: auto;
    }

    .overlay-top {
        display: flex;
        justify-content: flex-start;
    }

    .overlay-top .avatar {
        width: 40px;
        height: 40px;
        border: 2px solid white;
        border-radius: 50%;
    }

    .overlay-bottom {
        display: flex;
        justify-content: space-evenly;
        gap: 0.5rem;
    }

    .overlay-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        padding: 0.4rem 0.6rem;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .overlay-btn:hover {
        background: rgba(255, 255, 255, 0.4);
    }

    .lightbox-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        font-size: 2rem;
        background: rgba(255, 255, 255, 0.1);
        color: white;
        padding: 0.5rem 1rem;
        font-size: 1.25rem;
        cursor: pointer;
    }

    .lightbox-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.9);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        flex-direction: column;
    }

    .lightbox-overlay.active {
        display: flex;
    }

    .lightbox-image {
        max-width: 90vw;
        max-height: 80vh;
        object-fit: contain;
        border-radius: 4px;
        margin-bottom: 1rem;
    }

    .lightbox-controls {
        display: flex;
        gap: 1rem;
    }

    .lightbox-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        padding: 0.6rem 1rem;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .lightbox-btn:hover {
        background: rgba(255, 255, 255, 0.4);
    }

    .lightbox-tags {
        margin-top: 10px;
    }

    .lightbox-tag-editor-modal {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(30, 30, 30, 0.95);
        padding: 1rem;
        border-radius: 6px;
        box-shadow: 0 0 10px #000;
        z-index: 1000;
        width: 80%;
        max-width: 400px;
        color: white;
    }

    .lightbox-tag-editor-modal.hidden {
        display: none;
    }

    .tag-list {
        margin-top: 0.5rem;
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        justify-content: center;
    }

    .tag-pill {
        background-color: rgba(255, 255, 255, 0.5);
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 999px;
        font-size: 0.6rem;
    }

    .tag-pill.empty {
        opacity: 0.6;
    }

    a.download-link {
        display: contents;
    }

    .controls {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        width: 100%;
        margin: 10px 0;
    }

    @media (max-width: 768px) {

        .lightbox-controls {
            gap: 0.5rem;
        }
    }
</style>

<main class="gallery-container">
    <div id="uploadModal" class="modal hidden">
        <div class="modal-content">
            <button id="closeUploadModalButton" class="modal-close">‚úñ</button>
            <div style="margin-bottom: 1rem;">
                Subite unas fotis, rey <span style="font-size: 0.85em;">(m√°ximo 10)</span>.
            </div>

            <form hx-post="/trips/<%-currentOrUpcomingTrip.slug%>/upload" hx-target="#media-grid" hx-swap="afterbegin"
                hx-encoding="multipart/form-data">
                <input type="file" name="media" accept="image/*" multiple onchange="toggleUploadButton(this)">
                <button type="submit" disabled id="uploadButton">Subir</button>
            </form>
        </div>
    </div>

    <script>
        function toggleUploadButton(input) {
            const btn = document.getElementById('uploadButton');
            btn.disabled = input.files.length === 0;
        }
    </script>

    <% if (media.length === 0) { %>
    <p>No hay im√°genes todav√≠a. ¬°Que amargos son!</p>
    <% } %>


    <div class="controls">
        <button class="button" id="showUploadModalButton">Agregar</button>
    </div>

    <script>
        function hideUploadForm() {
            document.getElementById('uploadModal')?.classList.add('hidden');
            document.querySelector('#uploadModal form')?.reset();
        }

        function showUploadForm() {
            document.getElementById('uploadModal')?.classList.remove('hidden');
        }
        document.getElementById('closeUploadModalButton').addEventListener('click', hideUploadForm);
        document.getElementById('showUploadModalButton').addEventListener('click', showUploadForm);
    </script>

    <%- include('filter-pills')%>
    
    <div id="media-grid" class="media-grid">
        <% if (media.length > 0 ) {%>
        <% media.forEach((item, index) => { %>
        <%- include('media-item',{index, item}) %>
        <% }) %>
    </div>

    <!-- Lightbox -->
    <div class="lightbox-overlay" id="lightbox">
        <button id="lightbox-close" class="lightbox-close" aria-label="Cerrar">&times;</button>

        <img id="lightbox-img" class="lightbox-image" src="" alt="Expanded media" />
        <div class="lightbox-controls">
            <button class="lightbox-btn" title="Previous" id="lightbox-prev">‚èÆ</button>
            <a id="lightbox-download" href="#" class="download-link" download>
                <button class="lightbox-btn" title="Download">‚¨áÔ∏è</button>
            </a>
            <button class="lightbox-btn" title="Like" id="lightbox-like-button"></button>
            <!-- 
            this button has to be hidden or shown according to
            document.getElementById('lightbox-metadata').dataset.isOwner
            -->
            <button class="lightbox-btn" title="Delete item" id="lightbox-delete-button">‚ùå</button>

            <!-- 
            this button has to be hidden or shown according to
            document.getElementById('lightbox-metadata').dataset.isOwner
            -->
            <button class="lightbox-btn" title="Edit Tags" id="lightbox-edit-tags-button">üè∑Ô∏è</button>

            <button class="lightbox-btn" title="Next" id="lightbox-next">‚è≠</button>
        </div>
        <!-- This next div is the 'state' for the current media item's metadata for the lightbox -->
        <div id="lightbox-meta"></div>
        <div class="lightbox-tag-editor-modal hidden" id="lightbox-tag-editor-modal"></div>

    </div>

    <script>
        // let mediaItems = Array.from(document.querySelectorAll('.gallery-item'));
        function getGalleryItems() {
            return Array.from(document.querySelectorAll('.gallery-item'));
        }
        const lightbox = document.getElementById('lightbox');
        const lightboxImg = document.getElementById('lightbox-img');
        let currentIndex = -1;

        function stringNumberToBoolean(stringNumber) {
            return Boolean(Number(stringNumber));
        }

        function stringToBoolean(string) {
            return Boolean(string);
        }

        function htmxAjaxPromise(method, url, options = {}) {
            return new Promise((resolve, reject) => {
                const targetSelector = options.target;
                if (!targetSelector) {
                    reject(new Error("htmxAjaxPromise requires a { target } option"));
                    return;
                }

                const targetId = targetSelector.startsWith('#')
                    ? targetSelector.slice(1)
                    : targetSelector;

                const handler = (evt) => {
                    if (evt.target.id === targetId) {
                        document.body.removeEventListener('htmx:afterSwap', handler);
                        resolve(evt);
                    }
                };

                document.body.addEventListener('htmx:afterSwap', handler);

                try {
                    htmx.ajax(method, url, options);
                } catch (err) {
                    document.body.removeEventListener('htmx:afterSwap', handler);
                    reject(err);
                }
            });
        }


        async function openLightbox(index) {
            const mediaItems = getGalleryItems();
            if (index < 0 || index >= mediaItems.length) return;
            // When openLightbox(index) is called, fire an HTMX request to /media/:id/lightbox-data
            // Use hx-target to inject into a #lightbox-meta container
            const mediaId = mediaItems[index].dataset.mediaId;
            // htmx.ajax('GET', `/trips/<%= currentOrUpcomingTrip.slug %>/gallery/${mediaId}/lightbox-data`, { target: '#lightbox-meta' });

            await htmxAjaxPromise(
                'GET',
                `/trips/<%= currentOrUpcomingTrip.slug %>/gallery/${mediaId}/lightbox-data`,
                { target: '#lightbox-meta' }
            );

            const meta = document.getElementById('lightbox-metadata').dataset;
            // now according to the data in #lightbox-container i must make some modifications
            // const userLiked = Boolean(Number(document.getElementById('lightbox-meta-userLiked').value));
            const userLiked = stringNumberToBoolean(meta.liked);
            const lightboxLikeButton = document.getElementById('lightbox-like-button');
            if (userLiked) {
                lightboxLikeButton.innerHTML = "‚ù§Ô∏è"
            }
            else {
                lightboxLikeButton.innerHTML = "ü§ç"
            }
            const itemUrl = meta.mediaUrl;
            document.getElementById('lightbox-download').href = itemUrl;

            if (stringNumberToBoolean(meta.mediaOwner) || <%= currentUser.role === 'admin' %>) {
                document.getElementById('lightbox-delete-button').style.display = 'block';
                document.getElementById('lightbox-edit-tags-button').style.display = 'block';
            }
            else {
                document.getElementById('lightbox-delete-button').style.display = 'none';
                document.getElementById('lightbox-edit-tags-button').style.display = 'none'
            }

            currentIndex = index;
            const link = mediaItems[currentIndex];
            const fullUrl = link.getAttribute('href');
            lightboxImg.src = fullUrl;
            lightbox.classList.add('active');
        }

        function openLightboxFromElement(trigger) {
            const anchor = trigger.closest('.media-item')?.querySelector('.gallery-item');
            if (!anchor) return;

            const galleryItems = Array.from(document.querySelectorAll('#media-grid .gallery-item'));
            const index = galleryItems.indexOf(anchor);

            if (index === -1) return;

            openLightbox(index);
        }

        function closeLightbox() {
            lightbox.classList.remove('active');
            lightboxImg.src = '';
        }

        function showNext() {
            const mediaItems = getGalleryItems();
            const nextIndex = (currentIndex + 1) % mediaItems.length;
            openLightbox(nextIndex);
        }

        function showPrev() {
            const mediaItems = getGalleryItems();
            const prevIndex = (currentIndex - 1 + mediaItems.length) % mediaItems.length;
            openLightbox(prevIndex);
        }

        function deleteMediaItem() {
            if (!confirm('Seguro de borrar este item?')) return false;
            const meta = document.getElementById('lightbox-metadata').dataset;
            const mediaId = meta.mediaId;
            const url = `/trips/<%= currentOrUpcomingTrip.slug %>/gallery/${mediaId}/delete`;
            const options = { target: `#media-item-${mediaId}`, swap: 'outerHTML' };
            try {
                htmx.ajax('DELETE', url, options);
                return true;
            }
            catch (error) {
                showToast('Error deleting media item: ' + error, 'error');
                return false;
            }
        }
        function editTags() {
            const meta = document.getElementById('lightbox-metadata').dataset;
            const mediaId = meta.mediaId;
            const modal = document.getElementById('lightbox-tag-editor-modal');
            const url = `/trips/<%= currentOrUpcomingTrip.slug %>/gallery/${mediaId}/tags/edit`;

            // Set a one-time event listener for this request
            const listener = () => {
                modal.classList.remove('hidden');
                htmx.off("htmx:afterSwap", listener); // clean up after firing
            };

            htmx.on("htmx:afterSwap", listener);

            // Fire the HTMX request
            try {
                htmx.ajax('GET', url, { target: '#lightbox-tag-editor-modal', swap: 'innerHTML' });
            }
            catch (error) {
                showToast('Error retrieving tags: ' + error, 'error');
            }
        }

        async function likeToggle() {
            const meta = document.getElementById('lightbox-metadata').dataset;
            const mediaId = meta.mediaId;
            const url = `/trips/<%= currentOrUpcomingTrip.slug %>/gallery/${mediaId}/like`;
            const options = { target: `#like-button-container-${mediaId}`, swap: 'innerHTML' };
            try {
                await htmxAjaxPromise('POST', url, options);
                const userLiked = stringNumberToBoolean(meta.liked);
                const lightboxLikeButton = document.getElementById('lightbox-like-button');
                if (userLiked) {
                    lightboxLikeButton.innerHTML = "ü§ç"
                }
                else {
                    lightboxLikeButton.innerHTML = "‚ù§Ô∏è"
                }
            } catch (err) {
                showToast('Error toggling like', 'error');
            }
        }

        const mediaItems = getGalleryItems();
        mediaItems.forEach((item, idx) => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                openLightbox(idx);
            });
        });

        document.getElementById('lightbox-close').addEventListener('click', closeLightbox);
        document.getElementById('lightbox-next').addEventListener('click', showNext);
        document.getElementById('lightbox-prev').addEventListener('click', showPrev);
        document.getElementById('lightbox-like-button').addEventListener('click', likeToggle);
        document.getElementById('lightbox-delete-button').addEventListener('click', async () => {
            if (await deleteMediaItem()) { closeLightbox() }
        });
        document.getElementById('lightbox-edit-tags-button').addEventListener('click', editTags);


        document.addEventListener('keydown', (e) => {
            if (!lightbox.classList.contains('active')) return;
            if (e.key === 'ArrowRight') showNext();
            if (e.key === 'ArrowLeft') showPrev();
            if (e.key === 'Escape') closeLightbox();
        });

        lightbox.addEventListener('click', (e) => {
            if (e.target === lightbox) closeLightbox();
        });

        // this will be triggered when the upload is complete
        document.body.addEventListener('upload-complete', () => {
            document.getElementById('uploadModal')?.classList.add('hidden');
            document.querySelector('#uploadModal form')?.reset();
        });

    </script>
    <% } %>
</main>
<%- include('../../partials/footer') %>